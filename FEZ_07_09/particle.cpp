//=============================================================================
//
// パーティクル処理 [particle.cpp]
// Author : 佐藤颯紀
//
//=============================================================================

//=============================================================================
// インクルード
//=============================================================================
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "billboard.h"
#include "particle.h"

//=============================================================================
// マクロ定義
//=============================================================================
#define MIN_UV		(0.0f)	// UV最小値
#define MAX_UV		(1.0f)	// UV最大値
#define TEX_COIN	("data/TEXTURE/particle_coin.png")	// コインのテクスチャ情報

//=============================================================================
// 静的メンバ変数宣言
//=============================================================================
LPDIRECT3DTEXTURE9 CParticle::m_apTexture[TEX_TYPE_MAX] = {};

//=============================================================================
// コンストラクタ
//=============================================================================
CParticle::CParticle()
{

}

//=============================================================================
// デストラクタ
//=============================================================================
CParticle::~CParticle()
{

}

//=============================================================================
// テクスチャの読み込み
//=============================================================================
HRESULT CParticle::Load(void)
{
	// レンダラー情報の取得
	LPDIRECT3DDEVICE9 pDevice = CManager::GetRenderer()->GetDevice();

	// テクスチャ読み込み
	D3DXCreateTextureFromFile(pDevice, TEX_COIN, &m_apTexture[TEX_TYPE_1]);

	return S_OK;
}

//=============================================================================
// テクスチャの破棄
//=============================================================================
void CParticle::Unload(void)
{
	// 3回繰り返す
	for (int nCnt = 0; nCnt < TEX_TYPE_MAX; nCnt++)
	{
		// テクスチャの破棄
		if (m_apTexture[nCnt] != NULL)
		{
			// テクスチャRelease
			m_apTexture[nCnt]->Release();

			// m_pTextureをNULLに
			m_apTexture[nCnt] = NULL;
		}
	}
}

//=============================================================================
// 初期化処理
//=============================================================================
HRESULT CParticle::Init(void)
{
	// 初期化処理
	CBillboard::Init();

	return S_OK;
}

//=============================================================================
// 終了処理
//=============================================================================
void CParticle::Uninit(void)
{
	// 終了処理
	CBillboard::Uninit();
}

//=============================================================================
// 更新処理
//=============================================================================
void CParticle::Update(void)
{
	// 更新処理
	CBillboard::Update();
}

//=============================================================================
// 描画処理
//=============================================================================
void CParticle::Draw(void)
{
	// 描画処理
	CBillboard::Draw();
}

//=============================================================================
// 情報設定
//=============================================================================
void CParticle::SetParticle(D3DXVECTOR3 pos, D3DXVECTOR3 size, D3DXVECTOR3 rot, D3DXCOLOR col, TEX_TYPE TexType)
{
	// 位置設定
	SetPos(pos);

	// サイズ設定
	SetSize(size);

	// 向き設定
	SetRot(rot);

	// 色設定
	SetCol(col);

	// テクスチャタイプ設定
	m_TexType = TexType;

	// テクスチャ受け渡し
	BindTexture(m_apTexture[m_TexType]);
}