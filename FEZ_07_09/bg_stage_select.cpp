//=============================================================================
//
// ステージ選択画面の背景 [bg_stage_select.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "bg_stage_select.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE_PASS ("data/TEXTURE/bg_fez1.png")						//テクスチャのパス
#define POSITION (D3DXVECTOR3(SCREEN_WIDTH / 2,SCREEN_HEIGHT / 2,0.0f))	//位置
#define SIZE (D3DXVECTOR3(1080.0f,1920.0f,0.0f))						//サイズ

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CStageSelectBG::m_pTexture = NULL;	//テクスチャのポインタ

//=============================================================================
// コンストラクタ
//=============================================================================
CStageSelectBG::CStageSelectBG()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CStageSelectBG::~CStageSelectBG()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CStageSelectBG::TextureLoad(void)
{
	//レンダラーの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
	//テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,	//デバイスへのポインタ
		TEXTURE_PASS,					//ファイルの名前
		&m_pTexture);					//読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CStageSelectBG::TextureUnload(void)
{
	//もしテクスチャのポインタがNULLではない場合
	if (m_pTexture != NULL)
	{
		//テクスチャの破棄処理関数呼び出し
		m_pTexture->Release();
		//テクスチャをNULLにする
		m_pTexture = NULL;
	}
}

//=============================================================================
// 生成処理関数
//=============================================================================
CStageSelectBG * CStageSelectBG::Create(void)
{
	//ステージ選択画面背景のポインタ
	CStageSelectBG * pStage1Button = NULL;
	//ステージ選択画面背景のポインタがNULLの場合
	if (pStage1Button == NULL)
	{
		//ステージ選択画面背景のメモリ確保
		pStage1Button = new CStageSelectBG;
		//ステージ選択画面背景のポインタがNULLではない場合
		if (pStage1Button != NULL)
		{
			//ステージ選択画面背景の初期化処理関数呼び出し
			pStage1Button->Init();
		}
	}
	//ステージ選択画面背景のポインタを返す
	return pStage1Button;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CStageSelectBG::Init(void)
{
	//ポリゴン2Dの初期化処理関数呼び出し
	CPolygon2D::Init();
	//テクスチャの設定
	SetTexUV(0.0f, 1.0f, 0.0f, 1.0f);
	//位置を設定
	SetPos(POSITION);
	//サイズ設定
	SetSize(SIZE.y, SIZE.x);
	//テクスチャの割り当て
	BindTexture(m_pTexture);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CStageSelectBG::Uninit(void)
{
	//ポリゴン2Dの終了処理関数呼び出し
	CPolygon2D::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CStageSelectBG::Update(void)
{
	//ポリゴン2Dの更新処理関数呼び出し
	CPolygon2D::Update();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CStageSelectBG::Draw(void)
{
	//ポリゴン2Dの描画処理関数呼び出し
	CPolygon2D::Draw();
}