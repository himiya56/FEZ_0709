//=============================================================================
//
// タイトルロゴ [logo_title.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "logo_title.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE_PASS ("data/TEXTURE/Title.png")					//テクスチャのパス
#define POSITION (D3DXVECTOR3(SCREEN_WIDTH / 2 - 50.0f,SCREEN_HEIGHT / 4 - 50.0f,0.0f))	//位置
#define SIZE (D3DXVECTOR3(200.0f * 1.5f,800.0f * 1.5f,0.0f))							//サイズ

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CTitleLogo::m_pTexture = NULL;	//テクスチャのポインタ

//=============================================================================
// コンストラクタ
//=============================================================================
CTitleLogo::CTitleLogo()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CTitleLogo::~CTitleLogo()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CTitleLogo::TextureLoad(void)
{
	//レンダラーの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
	//テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,	//デバイスへのポインタ
		TEXTURE_PASS,					//ファイルの名前
		&m_pTexture);					//読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CTitleLogo::TextureUnload(void)
{
	//もしテクスチャのポインタがNULLではない場合
	if (m_pTexture != NULL)
	{
		//テクスチャの破棄処理関数呼び出し
		m_pTexture->Release();
		//テクスチャをNULLにする
		m_pTexture = NULL;
	}
}

//=============================================================================
// 生成処理関数
//=============================================================================
CTitleLogo * CTitleLogo::Create(void)
{
	//タイトルロゴのポインタ
	CTitleLogo * pTitleLogo = NULL;
	//タイトルロゴのポインタがNULLの場合
	if (pTitleLogo == NULL)
	{
		//タイトルロゴのメモリ確保
		pTitleLogo = new CTitleLogo;
		//タイトルロゴのポインタがNULLではない場合
		if (pTitleLogo != NULL)
		{
			//タイトルロゴの初期化処理関数呼び出し
			pTitleLogo->Init();
		}
	}
	//タイトルロゴのポインタを返す
	return pTitleLogo;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CTitleLogo::Init(void)
{
	//ポリゴン2Dの初期化処理関数呼び出し
	CPolygon2D::Init();
	//テクスチャの設定
	SetTexUV(0.0f, 1.0f, 0.0f, 1.0f);
	//位置を設定
	SetPos(POSITION);
	//サイズ設定
	SetSize(SIZE.y, SIZE.x);
	//テクスチャの割り当て
	BindTexture(m_pTexture);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CTitleLogo::Uninit(void)
{
	//ポリゴン2Dの終了処理関数呼び出し
	CPolygon2D::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CTitleLogo::Update(void)
{
	//ポリゴン2Dの更新処理関数呼び出し
	CPolygon2D::Update();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CTitleLogo::Draw(void)
{
	//ポリゴン2Dの描画処理関数呼び出し
	CPolygon2D::Draw();
}