//=============================================================================
//
// チュートリアル画面の背景 [bg_tutorial.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "bg_tutorial.h"
#include "joystick.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define KEYBOARD_GUID_TEXTURE ("data/TEXTURE/bg_title.png")			//テクスチャのパス
#define JOYSTICK_GUID_TEXTURE ("data/TEXTURE/Tutorial_FEZ.png")			//テクスチャのパス
#define POSITION (D3DXVECTOR3(SCREEN_WIDTH / 2,SCREEN_HEIGHT / 2,0.0f))	//位置
#define SIZE (D3DXVECTOR3(1080.0f,1920.0f,0.0f))						//サイズ

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CTutorialBG::m_apTexture[TEXTURE_MAX] = {};	//テクスチャのポインタ

//=============================================================================
// コンストラクタ
//=============================================================================
CTutorialBG::CTutorialBG()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CTutorialBG::~CTutorialBG()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CTutorialBG::TextureLoad(void)
{
	//レンダラーの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
	//テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,			//デバイスへのポインタ
		KEYBOARD_GUID_TEXTURE,					//ファイルの名前
		&m_apTexture[TEXTURE_KEYBOARD_GUID]);	//読み込むメモリー
												//テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,			//デバイスへのポインタ
		JOYSTICK_GUID_TEXTURE,					//ファイルの名前
		&m_apTexture[TEXTURE_JOYSTICK_GUID]);	//読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CTutorialBG::TextureUnload(void)
{
	for (int nCount = 0; nCount < TEXTURE_MAX; nCount++)
	{
		//もしテクスチャのポインタがNULLではない場合
		if (m_apTexture[nCount] != NULL)
		{
			//テクスチャの破棄処理関数呼び出し
			m_apTexture[nCount]->Release();
			//テクスチャをNULLにする
			m_apTexture[nCount] = NULL;
		}
	}
}

//=============================================================================
// 生成処理関数
//=============================================================================
CTutorialBG * CTutorialBG::Create(void)
{
	//チュートリアル画面背景のポインタ
	CTutorialBG * pTutorialBG = NULL;
	//チュートリアル画面背景のポインタがNULLの場合
	if (pTutorialBG == NULL)
	{
		//チュートリアル画面背景のメモリ確保
		pTutorialBG = new CTutorialBG;
		//チュートリアル画面背景のポインタがNULLではない場合
		if (pTutorialBG != NULL)
		{
			//チュートリアル画面背景の初期化処理関数呼び出し
			pTutorialBG->Init();
		}
	}
	//チュートリアル画面背景のポインタを返す
	return pTutorialBG;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CTutorialBG::Init(void)
{
	//ポリゴン2Dの初期化処理関数呼び出し
	CPolygon2D::Init();
	//テクスチャの設定
	SetTexUV(0.0f, 1.0f, 0.0f, 1.0f);
	//位置を設定
	SetPos(POSITION);
	//サイズ設定
	SetSize(SIZE.y, SIZE.x);
	//もしジョイスティックがNULLだったら
	if (CJoystick::GetDevice(JOYSTICK_1P) == NULL)
	{
		//テクスチャの割り当て
		BindTexture(m_apTexture[TEXTURE_KEYBOARD_GUID]);
	}
	else
	{
		//テクスチャの割り当て
		BindTexture(m_apTexture[TEXTURE_JOYSTICK_GUID]);
	}
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CTutorialBG::Uninit(void)
{
	//ポリゴン2Dの終了処理関数呼び出し
	CPolygon2D::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CTutorialBG::Update(void)
{
	//ポリゴン2Dの更新処理関数呼び出し
	CPolygon2D::Update();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CTutorialBG::Draw(void)
{
	//ポリゴン2Dの描画処理関数呼び出し
	CPolygon2D::Draw();
}