//=============================================================================
//
// ドットの背景 [bg_dot.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "bg_dot.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE_PASS ("data/TEXTURE/bg_fez2.png")						//テクスチャのパス
#define POSITION (D3DXVECTOR3(SCREEN_WIDTH / 2,SCREEN_HEIGHT / 2,0.0f))	//位置
#define SIZE (D3DXVECTOR3(1080.0f,1920.0f,0.0f))						//サイズ
#define MINIMUM_COUNT_ANIME (0)											//カウントアニメの最小値
#define MOVE_VALUE (0.001)												//移動量

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CDotBG::m_pTexture = NULL;	//テクスチャのポインタ

//=============================================================================
// コンストラクタ
//=============================================================================
CDotBG::CDotBG()
{
	m_nCountAnime = MINIMUM_COUNT_ANIME;	//カウントアニメ
}

//=============================================================================
// デストラクタ
//=============================================================================
CDotBG::~CDotBG()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CDotBG::TextureLoad(void)
{
	//レンダラーの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
	//テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,	//デバイスへのポインタ
		TEXTURE_PASS,					//ファイルの名前
		&m_pTexture);					//読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CDotBG::TextureUnload(void)
{
	//もしテクスチャのポインタがNULLではない場合
	if (m_pTexture != NULL)
	{
		//テクスチャの破棄処理関数呼び出し
		m_pTexture->Release();
		//テクスチャをNULLにする
		m_pTexture = NULL;
	}
}

//=============================================================================
// 生成処理関数
//=============================================================================
CDotBG * CDotBG::Create(void)
{
	//ドット背景のポインタ
	CDotBG * pDotBG = NULL;
	//ドット背景のポインタがNULLの場合
	if (pDotBG == NULL)
	{
		//ドット背景のメモリ確保
		pDotBG = new CDotBG;
		//ドット背景のポインタがNULLではない場合
		if (pDotBG != NULL)
		{
			//ドット背景の初期化処理関数呼び出し
			pDotBG->Init();
		}
	}
	//ドット背景のポインタを返す
	return pDotBG;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CDotBG::Init(void)
{
	//ポリゴン2Dの初期化処理関数呼び出し
	CPolygon2D::Init();
	//テクスチャの設定
	SetTexUV(0.0f, 1.0f, 0.0f, 1.0f);
	//位置を設定
	SetPos(POSITION);
	//サイズ設定
	SetSize(SIZE.y, SIZE.x);
	//テクスチャの割り当て
	BindTexture(m_pTexture);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CDotBG::Uninit(void)
{
	//ポリゴン2Dの終了処理関数呼び出し
	CPolygon2D::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CDotBG::Update(void)
{
	//テクスチャの設定
	SetTexUV(0.0f, 1.0f, MOVE_VALUE * m_nCountAnime, MOVE_VALUE * m_nCountAnime - 1.0f);
	//ポリゴン2Dの更新処理関数呼び出し
	CPolygon2D::Update();
	//カウントアニメを加算する
	m_nCountAnime++;
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CDotBG::Draw(void)
{
	//ポリゴン2Dの描画処理関数呼び出し
	CPolygon2D::Draw();
}