//=============================================================================
//
// キャンセルボタン [button_cancel.cpp]
// Author : 二階堂汰一
//
//=============================================================================

//*****************************************************************************
// ヘッダファイルのインクルード
//*****************************************************************************
#include "main.h"
#include "manager.h"
#include "renderer.h"
#include "button_cancel.h"

//*****************************************************************************
// マクロ定義
//*****************************************************************************
#define TEXTURE_PASS ("data/TEXTURE/Button_Cancel.png")		//テクスチャのパス

//*****************************************************************************
// 静的メンバ変数の初期化
//*****************************************************************************
LPDIRECT3DTEXTURE9 CCancelButton::m_pTexture = NULL;	//テクスチャのポインタ

//=============================================================================
// コンストラクタ
//=============================================================================
CCancelButton::CCancelButton()
{
}

//=============================================================================
// デストラクタ
//=============================================================================
CCancelButton::~CCancelButton()
{
}

//=============================================================================
// テクスチャ読み込み関数
//=============================================================================
HRESULT CCancelButton::TextureLoad(void)
{
	//レンダラーの取得
	CRenderer *pRenderer = CManager::GetRenderer();
	//デバイスの取得
	LPDIRECT3DDEVICE9 pDevice = pRenderer->GetDevice();
	//テクスチャの生成
	D3DXCreateTextureFromFile(pDevice,	//デバイスへのポインタ
		TEXTURE_PASS,					//ファイルの名前
		&m_pTexture);					//読み込むメモリー
	return S_OK;
}

//=============================================================================
// テクスチャ破棄関数
//=============================================================================
void CCancelButton::TextureUnload(void)
{
	//もしテクスチャのポインタがNULLではない場合
	if (m_pTexture != NULL)
	{
		//テクスチャの破棄処理関数呼び出し
		m_pTexture->Release();
		//テクスチャをNULLにする
		m_pTexture = NULL;
	}
}

//=============================================================================
// 生成処理関数
//=============================================================================
CCancelButton * CCancelButton::Create(D3DXVECTOR3 Position)
{
	//キャンセルボタンのポインタ
	CCancelButton * pCancelButton = NULL;
	//キャンセルボタンのポインタがNULLの場合
	if (pCancelButton == NULL)
	{
		//キャンセルボタンのメモリ確保
		pCancelButton = new CCancelButton;
		//キャンセルボタンのポインタがNULLではない場合
		if (pCancelButton != NULL)
		{
			//キャンセルボタンの位置設定
			pCancelButton->SetPos(Position);
			//キャンセルボタンの初期化処理関数呼び出し
			pCancelButton->Init();
		}
	}
	//キャンセルボタンのポインタを返す
	return pCancelButton;
}

//=============================================================================
// 初期化処理関数
//=============================================================================
HRESULT CCancelButton::Init(void)
{
	//ボタンの初期化処理関数呼び出し
	CButton::Init();
	//テクスチャの設定
	SetTexUV(0.0f, 1.0f, 0.0f, 1.0f);
	//サイズの設定
	SetSize(250.0f, 125.0f);
	//テクスチャの割り当て
	BindTexture(m_pTexture);
	return S_OK;
}

//=============================================================================
// 終了処理関数
//=============================================================================
void CCancelButton::Uninit(void)
{
	//ボタンの終了処理関数呼び出し
	CButton::Uninit();
}

//=============================================================================
// 更新処理関数
//=============================================================================
void CCancelButton::Update(void)
{
	//ボタンの更新処理関数呼び出し
	CButton::Update();
}

//=============================================================================
// 描画処理関数
//=============================================================================
void CCancelButton::Draw(void)
{
	//ボタンの描画処理関数呼び出し
	CButton::Draw();
}

//=============================================================================
// プレス処理関数
//=============================================================================
void CCancelButton::Press(void)
{
	//押したときのサウンド再生
	PlayButtonSE(CButton::BUTTON_SE_CANCEL);
	//モードの取得
	CManager::MODE mode = CManager::GetMode();
	//各モードの処理
	switch (mode)
	{
	case CManager::MODE_STAGE_SELECT:
		//タイトルモードに遷移する
		CManager::StartFade(CManager::MODE_TITLE);
		break;
	default:
		break;
	}
}